The importance of this section is to see the power and usefulness of the command line.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

	This can greatly cut down troubleshooting problems by keeping historical files that you can compare to
when you need to verify why/if a program worked prior to changes.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

	The pros of manually choosing when to commit would be the fact that 
	you can choose when it is appropriate to commit, and have a fully 
	compile-able save point that makes logical sense when you reload it.
	The cons would be that you are susceptible to human error, like forgetting to save, or having extremely long drawn out saves.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

	Git is designed for code, and therefore keeps all files current for troubleshooting purposes and consistency. 
	Google docs can consist of many files, all of which can and are most likely separate of eachother.

How can you use the commands git log and git diff to view the history of files?

	git log will show the Id's, titles, authors, ect of the changes, and git diff will provide a breakdown of the changes between the logs. This will provide a fast and easy way to see changes.
	
How might using version control make you more confident to make changes that could break something?

	This would help make myself more confident as it is extremely easy to revert back to a previous version that worked.

Now that you have your workspace set up, what do you want to try using Git for?

	I want to use it to help me learn android.


